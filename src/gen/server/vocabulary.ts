// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.1
// source: vocabulary.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "vocabulary";

export interface DirectoryValueRecord {
  id: string;
  name: string;
  directoryId: string;
}

export interface DirectoryRecord {
  id: string;
  name: string;
}

export interface v1VocabularyDirectoryCreateDefaultRequest {
  name: string;
}

export interface v1VocabularyDirectoryCreateDefaultResponse {
  id: string;
}

export interface v1VocabularyDirectoryUpdateDefaultRequest {
  id: string;
  name: string;
}

export interface v1VocabularyDirectoryUpdateDefaultResponse {
  id: string;
}

export interface v1VocabularyDirectoryDeleteDefaultRequest {
  id: string;
}

export interface v1VocabularyDirectoryDeleteDefaultResponse {
  id: string;
}

/** rpc v1VocabularyDirectoryReadDefault */
export interface v1VocabularyDirectoryReadDefaultRequest {
  id: string;
}

export interface v1VocabularyDirectoryReadDefaultResponse {
  directory: DirectoryRecord | undefined;
}

export interface v1VocabularyDirectoryListDefaultRequest {
}

export interface v1VocabularyDirectoryListDefaultResponse {
  directory: DirectoryRecord[];
}

export interface v1VocabularyDirectoryValueCreateDefaultRequest {
  name: string;
  directoryId: string;
}

export interface v1VocabularyDirectoryValueCreateDefaultResponse {
  id: string;
}

export interface v1VocabularyDirectoryValueUpdateDefaultRequest {
  id: string;
  name: string;
  directoryId: string;
}

export interface v1VocabularyDirectoryValueUpdateDefaultResponse {
  id: string;
}

export interface v1VocabularyDirectoryValueDeleteDefaultRequest {
  id: string;
}

export interface v1VocabularyDirectoryValueDeleteDefaultResponse {
  id: string;
}

export interface v1VocabularyDirectoryValueReadDefaultRequest {
  id: string;
}

export interface v1VocabularyDirectoryValueReadDefaultResponse {
  directoryValue: DirectoryValueRecord | undefined;
}

export interface v1VocabularyDirectoryValueListDefaultRequest {
  directoryId: string;
}

export interface v1VocabularyDirectoryValueListDefaultResponse {
  directoryValue: DirectoryValueRecord[];
}

export interface FieldDetail {
  label?: string | undefined;
  placeholder?: string | undefined;
  directoryId?: string | undefined;
}

export interface FieldRecord {
  id: string;
  type: string;
  name: string;
  detail: FieldDetail | undefined;
}

export interface v1VocabularyFieldCreateDefaultRequest {
  name: string;
  type: string;
  detail: FieldDetail | undefined;
}

export interface v1VocabularyFieldCreateDefaultResponse {
  id: string;
}

export interface v1VocabularyFieldUpdateDefaultRequest {
  id: string;
  name: string;
  type: string;
  detail: FieldDetail | undefined;
}

export interface v1VocabularyFieldUpdateDefaultResponse {
  id: string;
}

export interface v1VocabularyFieldReadDefaultRequest {
  id: string;
}

export interface v1VocabularyFieldReadDefaultResponse {
  field: FieldRecord | undefined;
}

export interface v1VocabularyFieldListDefaultRequest {
}

export interface v1VocabularyFieldListDefaultResponse {
  field: FieldRecord[];
}

export interface EntityRow {
  detailField: EntityDetailField[];
}

export interface EntityDetailField {
  fieldId: string;
  pos: number;
  col: number;
}

export interface EntityRecord {
  id: string;
  name: string;
  rows: EntityRow[];
}

export interface v1VocabularyEntityCreateDefaultRequest {
  name: string;
  rows: EntityRow[];
}

export interface v1VocabularyEntityCreateDefaultResponse {
  id: string;
}

export interface v1VocabularyEntityUpdateDefaultRequest {
  id: string;
  name: string;
  rows: EntityRow[];
}

export interface v1VocabularyEntityUpdateDefaultResponse {
  id: string;
}

export interface v1VocabularyEntityReadDefaultRequest {
  id: string;
}

export interface v1VocabularyEntityReadDefaultResponse {
  entity: EntityRecord | undefined;
}

export interface v1VocabularyEntityListDefaultRequest {
}

export interface v1VocabularyEntityListDefaultResponse {
  entity: EntityRecord[];
}

function createBaseDirectoryValueRecord(): DirectoryValueRecord {
  return { id: "", name: "", directoryId: "" };
}

export const DirectoryValueRecord: MessageFns<DirectoryValueRecord> = {
  encode(message: DirectoryValueRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.directoryId !== "") {
      writer.uint32(26).string(message.directoryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DirectoryValueRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDirectoryValueRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.directoryId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DirectoryValueRecord {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      directoryId: isSet(object.directoryId) ? globalThis.String(object.directoryId) : "",
    };
  },

  toJSON(message: DirectoryValueRecord): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.directoryId !== "") {
      obj.directoryId = message.directoryId;
    }
    return obj;
  },

  create(base?: DeepPartial<DirectoryValueRecord>): DirectoryValueRecord {
    return DirectoryValueRecord.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DirectoryValueRecord>): DirectoryValueRecord {
    const message = createBaseDirectoryValueRecord();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.directoryId = object.directoryId ?? "";
    return message;
  },
};

function createBaseDirectoryRecord(): DirectoryRecord {
  return { id: "", name: "" };
}

export const DirectoryRecord: MessageFns<DirectoryRecord> = {
  encode(message: DirectoryRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DirectoryRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDirectoryRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DirectoryRecord {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: DirectoryRecord): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DirectoryRecord>): DirectoryRecord {
    return DirectoryRecord.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DirectoryRecord>): DirectoryRecord {
    const message = createBaseDirectoryRecord();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBasev1VocabularyDirectoryCreateDefaultRequest(): v1VocabularyDirectoryCreateDefaultRequest {
  return { name: "" };
}

export const v1VocabularyDirectoryCreateDefaultRequest: MessageFns<v1VocabularyDirectoryCreateDefaultRequest> = {
  encode(message: v1VocabularyDirectoryCreateDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryCreateDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryCreateDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryCreateDefaultRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: v1VocabularyDirectoryCreateDefaultRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyDirectoryCreateDefaultRequest>): v1VocabularyDirectoryCreateDefaultRequest {
    return v1VocabularyDirectoryCreateDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<v1VocabularyDirectoryCreateDefaultRequest>,
  ): v1VocabularyDirectoryCreateDefaultRequest {
    const message = createBasev1VocabularyDirectoryCreateDefaultRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBasev1VocabularyDirectoryCreateDefaultResponse(): v1VocabularyDirectoryCreateDefaultResponse {
  return { id: "" };
}

export const v1VocabularyDirectoryCreateDefaultResponse: MessageFns<v1VocabularyDirectoryCreateDefaultResponse> = {
  encode(message: v1VocabularyDirectoryCreateDefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryCreateDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryCreateDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryCreateDefaultResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: v1VocabularyDirectoryCreateDefaultResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyDirectoryCreateDefaultResponse>): v1VocabularyDirectoryCreateDefaultResponse {
    return v1VocabularyDirectoryCreateDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<v1VocabularyDirectoryCreateDefaultResponse>,
  ): v1VocabularyDirectoryCreateDefaultResponse {
    const message = createBasev1VocabularyDirectoryCreateDefaultResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasev1VocabularyDirectoryUpdateDefaultRequest(): v1VocabularyDirectoryUpdateDefaultRequest {
  return { id: "", name: "" };
}

export const v1VocabularyDirectoryUpdateDefaultRequest: MessageFns<v1VocabularyDirectoryUpdateDefaultRequest> = {
  encode(message: v1VocabularyDirectoryUpdateDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryUpdateDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryUpdateDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryUpdateDefaultRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: v1VocabularyDirectoryUpdateDefaultRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyDirectoryUpdateDefaultRequest>): v1VocabularyDirectoryUpdateDefaultRequest {
    return v1VocabularyDirectoryUpdateDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<v1VocabularyDirectoryUpdateDefaultRequest>,
  ): v1VocabularyDirectoryUpdateDefaultRequest {
    const message = createBasev1VocabularyDirectoryUpdateDefaultRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBasev1VocabularyDirectoryUpdateDefaultResponse(): v1VocabularyDirectoryUpdateDefaultResponse {
  return { id: "" };
}

export const v1VocabularyDirectoryUpdateDefaultResponse: MessageFns<v1VocabularyDirectoryUpdateDefaultResponse> = {
  encode(message: v1VocabularyDirectoryUpdateDefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryUpdateDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryUpdateDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryUpdateDefaultResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: v1VocabularyDirectoryUpdateDefaultResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyDirectoryUpdateDefaultResponse>): v1VocabularyDirectoryUpdateDefaultResponse {
    return v1VocabularyDirectoryUpdateDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<v1VocabularyDirectoryUpdateDefaultResponse>,
  ): v1VocabularyDirectoryUpdateDefaultResponse {
    const message = createBasev1VocabularyDirectoryUpdateDefaultResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasev1VocabularyDirectoryDeleteDefaultRequest(): v1VocabularyDirectoryDeleteDefaultRequest {
  return { id: "" };
}

export const v1VocabularyDirectoryDeleteDefaultRequest: MessageFns<v1VocabularyDirectoryDeleteDefaultRequest> = {
  encode(message: v1VocabularyDirectoryDeleteDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryDeleteDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryDeleteDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryDeleteDefaultRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: v1VocabularyDirectoryDeleteDefaultRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyDirectoryDeleteDefaultRequest>): v1VocabularyDirectoryDeleteDefaultRequest {
    return v1VocabularyDirectoryDeleteDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<v1VocabularyDirectoryDeleteDefaultRequest>,
  ): v1VocabularyDirectoryDeleteDefaultRequest {
    const message = createBasev1VocabularyDirectoryDeleteDefaultRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasev1VocabularyDirectoryDeleteDefaultResponse(): v1VocabularyDirectoryDeleteDefaultResponse {
  return { id: "" };
}

export const v1VocabularyDirectoryDeleteDefaultResponse: MessageFns<v1VocabularyDirectoryDeleteDefaultResponse> = {
  encode(message: v1VocabularyDirectoryDeleteDefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryDeleteDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryDeleteDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryDeleteDefaultResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: v1VocabularyDirectoryDeleteDefaultResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyDirectoryDeleteDefaultResponse>): v1VocabularyDirectoryDeleteDefaultResponse {
    return v1VocabularyDirectoryDeleteDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<v1VocabularyDirectoryDeleteDefaultResponse>,
  ): v1VocabularyDirectoryDeleteDefaultResponse {
    const message = createBasev1VocabularyDirectoryDeleteDefaultResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasev1VocabularyDirectoryReadDefaultRequest(): v1VocabularyDirectoryReadDefaultRequest {
  return { id: "" };
}

export const v1VocabularyDirectoryReadDefaultRequest: MessageFns<v1VocabularyDirectoryReadDefaultRequest> = {
  encode(message: v1VocabularyDirectoryReadDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryReadDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryReadDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryReadDefaultRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: v1VocabularyDirectoryReadDefaultRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyDirectoryReadDefaultRequest>): v1VocabularyDirectoryReadDefaultRequest {
    return v1VocabularyDirectoryReadDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyDirectoryReadDefaultRequest>): v1VocabularyDirectoryReadDefaultRequest {
    const message = createBasev1VocabularyDirectoryReadDefaultRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasev1VocabularyDirectoryReadDefaultResponse(): v1VocabularyDirectoryReadDefaultResponse {
  return { directory: undefined };
}

export const v1VocabularyDirectoryReadDefaultResponse: MessageFns<v1VocabularyDirectoryReadDefaultResponse> = {
  encode(message: v1VocabularyDirectoryReadDefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.directory !== undefined) {
      DirectoryRecord.encode(message.directory, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryReadDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryReadDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.directory = DirectoryRecord.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryReadDefaultResponse {
    return { directory: isSet(object.directory) ? DirectoryRecord.fromJSON(object.directory) : undefined };
  },

  toJSON(message: v1VocabularyDirectoryReadDefaultResponse): unknown {
    const obj: any = {};
    if (message.directory !== undefined) {
      obj.directory = DirectoryRecord.toJSON(message.directory);
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyDirectoryReadDefaultResponse>): v1VocabularyDirectoryReadDefaultResponse {
    return v1VocabularyDirectoryReadDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyDirectoryReadDefaultResponse>): v1VocabularyDirectoryReadDefaultResponse {
    const message = createBasev1VocabularyDirectoryReadDefaultResponse();
    message.directory = (object.directory !== undefined && object.directory !== null)
      ? DirectoryRecord.fromPartial(object.directory)
      : undefined;
    return message;
  },
};

function createBasev1VocabularyDirectoryListDefaultRequest(): v1VocabularyDirectoryListDefaultRequest {
  return {};
}

export const v1VocabularyDirectoryListDefaultRequest: MessageFns<v1VocabularyDirectoryListDefaultRequest> = {
  encode(_: v1VocabularyDirectoryListDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryListDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryListDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): v1VocabularyDirectoryListDefaultRequest {
    return {};
  },

  toJSON(_: v1VocabularyDirectoryListDefaultRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyDirectoryListDefaultRequest>): v1VocabularyDirectoryListDefaultRequest {
    return v1VocabularyDirectoryListDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<v1VocabularyDirectoryListDefaultRequest>): v1VocabularyDirectoryListDefaultRequest {
    const message = createBasev1VocabularyDirectoryListDefaultRequest();
    return message;
  },
};

function createBasev1VocabularyDirectoryListDefaultResponse(): v1VocabularyDirectoryListDefaultResponse {
  return { directory: [] };
}

export const v1VocabularyDirectoryListDefaultResponse: MessageFns<v1VocabularyDirectoryListDefaultResponse> = {
  encode(message: v1VocabularyDirectoryListDefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.directory) {
      DirectoryRecord.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryListDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryListDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.directory.push(DirectoryRecord.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryListDefaultResponse {
    return {
      directory: globalThis.Array.isArray(object?.directory)
        ? object.directory.map((e: any) => DirectoryRecord.fromJSON(e))
        : [],
    };
  },

  toJSON(message: v1VocabularyDirectoryListDefaultResponse): unknown {
    const obj: any = {};
    if (message.directory?.length) {
      obj.directory = message.directory.map((e) => DirectoryRecord.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyDirectoryListDefaultResponse>): v1VocabularyDirectoryListDefaultResponse {
    return v1VocabularyDirectoryListDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyDirectoryListDefaultResponse>): v1VocabularyDirectoryListDefaultResponse {
    const message = createBasev1VocabularyDirectoryListDefaultResponse();
    message.directory = object.directory?.map((e) => DirectoryRecord.fromPartial(e)) || [];
    return message;
  },
};

function createBasev1VocabularyDirectoryValueCreateDefaultRequest(): v1VocabularyDirectoryValueCreateDefaultRequest {
  return { name: "", directoryId: "" };
}

export const v1VocabularyDirectoryValueCreateDefaultRequest: MessageFns<
  v1VocabularyDirectoryValueCreateDefaultRequest
> = {
  encode(
    message: v1VocabularyDirectoryValueCreateDefaultRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.directoryId !== "") {
      writer.uint32(18).string(message.directoryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryValueCreateDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryValueCreateDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.directoryId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryValueCreateDefaultRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      directoryId: isSet(object.directoryId) ? globalThis.String(object.directoryId) : "",
    };
  },

  toJSON(message: v1VocabularyDirectoryValueCreateDefaultRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.directoryId !== "") {
      obj.directoryId = message.directoryId;
    }
    return obj;
  },

  create(
    base?: DeepPartial<v1VocabularyDirectoryValueCreateDefaultRequest>,
  ): v1VocabularyDirectoryValueCreateDefaultRequest {
    return v1VocabularyDirectoryValueCreateDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<v1VocabularyDirectoryValueCreateDefaultRequest>,
  ): v1VocabularyDirectoryValueCreateDefaultRequest {
    const message = createBasev1VocabularyDirectoryValueCreateDefaultRequest();
    message.name = object.name ?? "";
    message.directoryId = object.directoryId ?? "";
    return message;
  },
};

function createBasev1VocabularyDirectoryValueCreateDefaultResponse(): v1VocabularyDirectoryValueCreateDefaultResponse {
  return { id: "" };
}

export const v1VocabularyDirectoryValueCreateDefaultResponse: MessageFns<
  v1VocabularyDirectoryValueCreateDefaultResponse
> = {
  encode(
    message: v1VocabularyDirectoryValueCreateDefaultResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryValueCreateDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryValueCreateDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryValueCreateDefaultResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: v1VocabularyDirectoryValueCreateDefaultResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(
    base?: DeepPartial<v1VocabularyDirectoryValueCreateDefaultResponse>,
  ): v1VocabularyDirectoryValueCreateDefaultResponse {
    return v1VocabularyDirectoryValueCreateDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<v1VocabularyDirectoryValueCreateDefaultResponse>,
  ): v1VocabularyDirectoryValueCreateDefaultResponse {
    const message = createBasev1VocabularyDirectoryValueCreateDefaultResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasev1VocabularyDirectoryValueUpdateDefaultRequest(): v1VocabularyDirectoryValueUpdateDefaultRequest {
  return { id: "", name: "", directoryId: "" };
}

export const v1VocabularyDirectoryValueUpdateDefaultRequest: MessageFns<
  v1VocabularyDirectoryValueUpdateDefaultRequest
> = {
  encode(
    message: v1VocabularyDirectoryValueUpdateDefaultRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.directoryId !== "") {
      writer.uint32(26).string(message.directoryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryValueUpdateDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryValueUpdateDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.directoryId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryValueUpdateDefaultRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      directoryId: isSet(object.directoryId) ? globalThis.String(object.directoryId) : "",
    };
  },

  toJSON(message: v1VocabularyDirectoryValueUpdateDefaultRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.directoryId !== "") {
      obj.directoryId = message.directoryId;
    }
    return obj;
  },

  create(
    base?: DeepPartial<v1VocabularyDirectoryValueUpdateDefaultRequest>,
  ): v1VocabularyDirectoryValueUpdateDefaultRequest {
    return v1VocabularyDirectoryValueUpdateDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<v1VocabularyDirectoryValueUpdateDefaultRequest>,
  ): v1VocabularyDirectoryValueUpdateDefaultRequest {
    const message = createBasev1VocabularyDirectoryValueUpdateDefaultRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.directoryId = object.directoryId ?? "";
    return message;
  },
};

function createBasev1VocabularyDirectoryValueUpdateDefaultResponse(): v1VocabularyDirectoryValueUpdateDefaultResponse {
  return { id: "" };
}

export const v1VocabularyDirectoryValueUpdateDefaultResponse: MessageFns<
  v1VocabularyDirectoryValueUpdateDefaultResponse
> = {
  encode(
    message: v1VocabularyDirectoryValueUpdateDefaultResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryValueUpdateDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryValueUpdateDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryValueUpdateDefaultResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: v1VocabularyDirectoryValueUpdateDefaultResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(
    base?: DeepPartial<v1VocabularyDirectoryValueUpdateDefaultResponse>,
  ): v1VocabularyDirectoryValueUpdateDefaultResponse {
    return v1VocabularyDirectoryValueUpdateDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<v1VocabularyDirectoryValueUpdateDefaultResponse>,
  ): v1VocabularyDirectoryValueUpdateDefaultResponse {
    const message = createBasev1VocabularyDirectoryValueUpdateDefaultResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasev1VocabularyDirectoryValueDeleteDefaultRequest(): v1VocabularyDirectoryValueDeleteDefaultRequest {
  return { id: "" };
}

export const v1VocabularyDirectoryValueDeleteDefaultRequest: MessageFns<
  v1VocabularyDirectoryValueDeleteDefaultRequest
> = {
  encode(
    message: v1VocabularyDirectoryValueDeleteDefaultRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryValueDeleteDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryValueDeleteDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryValueDeleteDefaultRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: v1VocabularyDirectoryValueDeleteDefaultRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(
    base?: DeepPartial<v1VocabularyDirectoryValueDeleteDefaultRequest>,
  ): v1VocabularyDirectoryValueDeleteDefaultRequest {
    return v1VocabularyDirectoryValueDeleteDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<v1VocabularyDirectoryValueDeleteDefaultRequest>,
  ): v1VocabularyDirectoryValueDeleteDefaultRequest {
    const message = createBasev1VocabularyDirectoryValueDeleteDefaultRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasev1VocabularyDirectoryValueDeleteDefaultResponse(): v1VocabularyDirectoryValueDeleteDefaultResponse {
  return { id: "" };
}

export const v1VocabularyDirectoryValueDeleteDefaultResponse: MessageFns<
  v1VocabularyDirectoryValueDeleteDefaultResponse
> = {
  encode(
    message: v1VocabularyDirectoryValueDeleteDefaultResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryValueDeleteDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryValueDeleteDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryValueDeleteDefaultResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: v1VocabularyDirectoryValueDeleteDefaultResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(
    base?: DeepPartial<v1VocabularyDirectoryValueDeleteDefaultResponse>,
  ): v1VocabularyDirectoryValueDeleteDefaultResponse {
    return v1VocabularyDirectoryValueDeleteDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<v1VocabularyDirectoryValueDeleteDefaultResponse>,
  ): v1VocabularyDirectoryValueDeleteDefaultResponse {
    const message = createBasev1VocabularyDirectoryValueDeleteDefaultResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasev1VocabularyDirectoryValueReadDefaultRequest(): v1VocabularyDirectoryValueReadDefaultRequest {
  return { id: "" };
}

export const v1VocabularyDirectoryValueReadDefaultRequest: MessageFns<v1VocabularyDirectoryValueReadDefaultRequest> = {
  encode(
    message: v1VocabularyDirectoryValueReadDefaultRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryValueReadDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryValueReadDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryValueReadDefaultRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: v1VocabularyDirectoryValueReadDefaultRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(
    base?: DeepPartial<v1VocabularyDirectoryValueReadDefaultRequest>,
  ): v1VocabularyDirectoryValueReadDefaultRequest {
    return v1VocabularyDirectoryValueReadDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<v1VocabularyDirectoryValueReadDefaultRequest>,
  ): v1VocabularyDirectoryValueReadDefaultRequest {
    const message = createBasev1VocabularyDirectoryValueReadDefaultRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasev1VocabularyDirectoryValueReadDefaultResponse(): v1VocabularyDirectoryValueReadDefaultResponse {
  return { directoryValue: undefined };
}

export const v1VocabularyDirectoryValueReadDefaultResponse: MessageFns<v1VocabularyDirectoryValueReadDefaultResponse> =
  {
    encode(
      message: v1VocabularyDirectoryValueReadDefaultResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.directoryValue !== undefined) {
        DirectoryValueRecord.encode(message.directoryValue, writer.uint32(10).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryValueReadDefaultResponse {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBasev1VocabularyDirectoryValueReadDefaultResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.directoryValue = DirectoryValueRecord.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): v1VocabularyDirectoryValueReadDefaultResponse {
      return {
        directoryValue: isSet(object.directoryValue) ? DirectoryValueRecord.fromJSON(object.directoryValue) : undefined,
      };
    },

    toJSON(message: v1VocabularyDirectoryValueReadDefaultResponse): unknown {
      const obj: any = {};
      if (message.directoryValue !== undefined) {
        obj.directoryValue = DirectoryValueRecord.toJSON(message.directoryValue);
      }
      return obj;
    },

    create(
      base?: DeepPartial<v1VocabularyDirectoryValueReadDefaultResponse>,
    ): v1VocabularyDirectoryValueReadDefaultResponse {
      return v1VocabularyDirectoryValueReadDefaultResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<v1VocabularyDirectoryValueReadDefaultResponse>,
    ): v1VocabularyDirectoryValueReadDefaultResponse {
      const message = createBasev1VocabularyDirectoryValueReadDefaultResponse();
      message.directoryValue = (object.directoryValue !== undefined && object.directoryValue !== null)
        ? DirectoryValueRecord.fromPartial(object.directoryValue)
        : undefined;
      return message;
    },
  };

function createBasev1VocabularyDirectoryValueListDefaultRequest(): v1VocabularyDirectoryValueListDefaultRequest {
  return { directoryId: "" };
}

export const v1VocabularyDirectoryValueListDefaultRequest: MessageFns<v1VocabularyDirectoryValueListDefaultRequest> = {
  encode(
    message: v1VocabularyDirectoryValueListDefaultRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.directoryId !== "") {
      writer.uint32(10).string(message.directoryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryValueListDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyDirectoryValueListDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.directoryId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyDirectoryValueListDefaultRequest {
    return { directoryId: isSet(object.directoryId) ? globalThis.String(object.directoryId) : "" };
  },

  toJSON(message: v1VocabularyDirectoryValueListDefaultRequest): unknown {
    const obj: any = {};
    if (message.directoryId !== "") {
      obj.directoryId = message.directoryId;
    }
    return obj;
  },

  create(
    base?: DeepPartial<v1VocabularyDirectoryValueListDefaultRequest>,
  ): v1VocabularyDirectoryValueListDefaultRequest {
    return v1VocabularyDirectoryValueListDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<v1VocabularyDirectoryValueListDefaultRequest>,
  ): v1VocabularyDirectoryValueListDefaultRequest {
    const message = createBasev1VocabularyDirectoryValueListDefaultRequest();
    message.directoryId = object.directoryId ?? "";
    return message;
  },
};

function createBasev1VocabularyDirectoryValueListDefaultResponse(): v1VocabularyDirectoryValueListDefaultResponse {
  return { directoryValue: [] };
}

export const v1VocabularyDirectoryValueListDefaultResponse: MessageFns<v1VocabularyDirectoryValueListDefaultResponse> =
  {
    encode(
      message: v1VocabularyDirectoryValueListDefaultResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      for (const v of message.directoryValue) {
        DirectoryValueRecord.encode(v!, writer.uint32(10).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyDirectoryValueListDefaultResponse {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBasev1VocabularyDirectoryValueListDefaultResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.directoryValue.push(DirectoryValueRecord.decode(reader, reader.uint32()));
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): v1VocabularyDirectoryValueListDefaultResponse {
      return {
        directoryValue: globalThis.Array.isArray(object?.directoryValue)
          ? object.directoryValue.map((e: any) => DirectoryValueRecord.fromJSON(e))
          : [],
      };
    },

    toJSON(message: v1VocabularyDirectoryValueListDefaultResponse): unknown {
      const obj: any = {};
      if (message.directoryValue?.length) {
        obj.directoryValue = message.directoryValue.map((e) => DirectoryValueRecord.toJSON(e));
      }
      return obj;
    },

    create(
      base?: DeepPartial<v1VocabularyDirectoryValueListDefaultResponse>,
    ): v1VocabularyDirectoryValueListDefaultResponse {
      return v1VocabularyDirectoryValueListDefaultResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<v1VocabularyDirectoryValueListDefaultResponse>,
    ): v1VocabularyDirectoryValueListDefaultResponse {
      const message = createBasev1VocabularyDirectoryValueListDefaultResponse();
      message.directoryValue = object.directoryValue?.map((e) => DirectoryValueRecord.fromPartial(e)) || [];
      return message;
    },
  };

function createBaseFieldDetail(): FieldDetail {
  return { label: undefined, placeholder: undefined, directoryId: undefined };
}

export const FieldDetail: MessageFns<FieldDetail> = {
  encode(message: FieldDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.label !== undefined) {
      writer.uint32(10).string(message.label);
    }
    if (message.placeholder !== undefined) {
      writer.uint32(18).string(message.placeholder);
    }
    if (message.directoryId !== undefined) {
      writer.uint32(26).string(message.directoryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FieldDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.placeholder = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.directoryId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FieldDetail {
    return {
      label: isSet(object.label) ? globalThis.String(object.label) : undefined,
      placeholder: isSet(object.placeholder) ? globalThis.String(object.placeholder) : undefined,
      directoryId: isSet(object.directoryId) ? globalThis.String(object.directoryId) : undefined,
    };
  },

  toJSON(message: FieldDetail): unknown {
    const obj: any = {};
    if (message.label !== undefined) {
      obj.label = message.label;
    }
    if (message.placeholder !== undefined) {
      obj.placeholder = message.placeholder;
    }
    if (message.directoryId !== undefined) {
      obj.directoryId = message.directoryId;
    }
    return obj;
  },

  create(base?: DeepPartial<FieldDetail>): FieldDetail {
    return FieldDetail.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FieldDetail>): FieldDetail {
    const message = createBaseFieldDetail();
    message.label = object.label ?? undefined;
    message.placeholder = object.placeholder ?? undefined;
    message.directoryId = object.directoryId ?? undefined;
    return message;
  },
};

function createBaseFieldRecord(): FieldRecord {
  return { id: "", type: "", name: "", detail: undefined };
}

export const FieldRecord: MessageFns<FieldRecord> = {
  encode(message: FieldRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.detail !== undefined) {
      FieldDetail.encode(message.detail, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FieldRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.detail = FieldDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FieldRecord {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      detail: isSet(object.detail) ? FieldDetail.fromJSON(object.detail) : undefined,
    };
  },

  toJSON(message: FieldRecord): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.detail !== undefined) {
      obj.detail = FieldDetail.toJSON(message.detail);
    }
    return obj;
  },

  create(base?: DeepPartial<FieldRecord>): FieldRecord {
    return FieldRecord.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FieldRecord>): FieldRecord {
    const message = createBaseFieldRecord();
    message.id = object.id ?? "";
    message.type = object.type ?? "";
    message.name = object.name ?? "";
    message.detail = (object.detail !== undefined && object.detail !== null)
      ? FieldDetail.fromPartial(object.detail)
      : undefined;
    return message;
  },
};

function createBasev1VocabularyFieldCreateDefaultRequest(): v1VocabularyFieldCreateDefaultRequest {
  return { name: "", type: "", detail: undefined };
}

export const v1VocabularyFieldCreateDefaultRequest: MessageFns<v1VocabularyFieldCreateDefaultRequest> = {
  encode(message: v1VocabularyFieldCreateDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.detail !== undefined) {
      FieldDetail.encode(message.detail, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyFieldCreateDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyFieldCreateDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.detail = FieldDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyFieldCreateDefaultRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      detail: isSet(object.detail) ? FieldDetail.fromJSON(object.detail) : undefined,
    };
  },

  toJSON(message: v1VocabularyFieldCreateDefaultRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.detail !== undefined) {
      obj.detail = FieldDetail.toJSON(message.detail);
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyFieldCreateDefaultRequest>): v1VocabularyFieldCreateDefaultRequest {
    return v1VocabularyFieldCreateDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyFieldCreateDefaultRequest>): v1VocabularyFieldCreateDefaultRequest {
    const message = createBasev1VocabularyFieldCreateDefaultRequest();
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    message.detail = (object.detail !== undefined && object.detail !== null)
      ? FieldDetail.fromPartial(object.detail)
      : undefined;
    return message;
  },
};

function createBasev1VocabularyFieldCreateDefaultResponse(): v1VocabularyFieldCreateDefaultResponse {
  return { id: "" };
}

export const v1VocabularyFieldCreateDefaultResponse: MessageFns<v1VocabularyFieldCreateDefaultResponse> = {
  encode(message: v1VocabularyFieldCreateDefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyFieldCreateDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyFieldCreateDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyFieldCreateDefaultResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: v1VocabularyFieldCreateDefaultResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyFieldCreateDefaultResponse>): v1VocabularyFieldCreateDefaultResponse {
    return v1VocabularyFieldCreateDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyFieldCreateDefaultResponse>): v1VocabularyFieldCreateDefaultResponse {
    const message = createBasev1VocabularyFieldCreateDefaultResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasev1VocabularyFieldUpdateDefaultRequest(): v1VocabularyFieldUpdateDefaultRequest {
  return { id: "", name: "", type: "", detail: undefined };
}

export const v1VocabularyFieldUpdateDefaultRequest: MessageFns<v1VocabularyFieldUpdateDefaultRequest> = {
  encode(message: v1VocabularyFieldUpdateDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.detail !== undefined) {
      FieldDetail.encode(message.detail, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyFieldUpdateDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyFieldUpdateDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.detail = FieldDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyFieldUpdateDefaultRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      detail: isSet(object.detail) ? FieldDetail.fromJSON(object.detail) : undefined,
    };
  },

  toJSON(message: v1VocabularyFieldUpdateDefaultRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.detail !== undefined) {
      obj.detail = FieldDetail.toJSON(message.detail);
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyFieldUpdateDefaultRequest>): v1VocabularyFieldUpdateDefaultRequest {
    return v1VocabularyFieldUpdateDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyFieldUpdateDefaultRequest>): v1VocabularyFieldUpdateDefaultRequest {
    const message = createBasev1VocabularyFieldUpdateDefaultRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    message.detail = (object.detail !== undefined && object.detail !== null)
      ? FieldDetail.fromPartial(object.detail)
      : undefined;
    return message;
  },
};

function createBasev1VocabularyFieldUpdateDefaultResponse(): v1VocabularyFieldUpdateDefaultResponse {
  return { id: "" };
}

export const v1VocabularyFieldUpdateDefaultResponse: MessageFns<v1VocabularyFieldUpdateDefaultResponse> = {
  encode(message: v1VocabularyFieldUpdateDefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyFieldUpdateDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyFieldUpdateDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyFieldUpdateDefaultResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: v1VocabularyFieldUpdateDefaultResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyFieldUpdateDefaultResponse>): v1VocabularyFieldUpdateDefaultResponse {
    return v1VocabularyFieldUpdateDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyFieldUpdateDefaultResponse>): v1VocabularyFieldUpdateDefaultResponse {
    const message = createBasev1VocabularyFieldUpdateDefaultResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasev1VocabularyFieldReadDefaultRequest(): v1VocabularyFieldReadDefaultRequest {
  return { id: "" };
}

export const v1VocabularyFieldReadDefaultRequest: MessageFns<v1VocabularyFieldReadDefaultRequest> = {
  encode(message: v1VocabularyFieldReadDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyFieldReadDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyFieldReadDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyFieldReadDefaultRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: v1VocabularyFieldReadDefaultRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyFieldReadDefaultRequest>): v1VocabularyFieldReadDefaultRequest {
    return v1VocabularyFieldReadDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyFieldReadDefaultRequest>): v1VocabularyFieldReadDefaultRequest {
    const message = createBasev1VocabularyFieldReadDefaultRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasev1VocabularyFieldReadDefaultResponse(): v1VocabularyFieldReadDefaultResponse {
  return { field: undefined };
}

export const v1VocabularyFieldReadDefaultResponse: MessageFns<v1VocabularyFieldReadDefaultResponse> = {
  encode(message: v1VocabularyFieldReadDefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field !== undefined) {
      FieldRecord.encode(message.field, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyFieldReadDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyFieldReadDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field = FieldRecord.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyFieldReadDefaultResponse {
    return { field: isSet(object.field) ? FieldRecord.fromJSON(object.field) : undefined };
  },

  toJSON(message: v1VocabularyFieldReadDefaultResponse): unknown {
    const obj: any = {};
    if (message.field !== undefined) {
      obj.field = FieldRecord.toJSON(message.field);
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyFieldReadDefaultResponse>): v1VocabularyFieldReadDefaultResponse {
    return v1VocabularyFieldReadDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyFieldReadDefaultResponse>): v1VocabularyFieldReadDefaultResponse {
    const message = createBasev1VocabularyFieldReadDefaultResponse();
    message.field = (object.field !== undefined && object.field !== null)
      ? FieldRecord.fromPartial(object.field)
      : undefined;
    return message;
  },
};

function createBasev1VocabularyFieldListDefaultRequest(): v1VocabularyFieldListDefaultRequest {
  return {};
}

export const v1VocabularyFieldListDefaultRequest: MessageFns<v1VocabularyFieldListDefaultRequest> = {
  encode(_: v1VocabularyFieldListDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyFieldListDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyFieldListDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): v1VocabularyFieldListDefaultRequest {
    return {};
  },

  toJSON(_: v1VocabularyFieldListDefaultRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyFieldListDefaultRequest>): v1VocabularyFieldListDefaultRequest {
    return v1VocabularyFieldListDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<v1VocabularyFieldListDefaultRequest>): v1VocabularyFieldListDefaultRequest {
    const message = createBasev1VocabularyFieldListDefaultRequest();
    return message;
  },
};

function createBasev1VocabularyFieldListDefaultResponse(): v1VocabularyFieldListDefaultResponse {
  return { field: [] };
}

export const v1VocabularyFieldListDefaultResponse: MessageFns<v1VocabularyFieldListDefaultResponse> = {
  encode(message: v1VocabularyFieldListDefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.field) {
      FieldRecord.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyFieldListDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyFieldListDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field.push(FieldRecord.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyFieldListDefaultResponse {
    return {
      field: globalThis.Array.isArray(object?.field) ? object.field.map((e: any) => FieldRecord.fromJSON(e)) : [],
    };
  },

  toJSON(message: v1VocabularyFieldListDefaultResponse): unknown {
    const obj: any = {};
    if (message.field?.length) {
      obj.field = message.field.map((e) => FieldRecord.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyFieldListDefaultResponse>): v1VocabularyFieldListDefaultResponse {
    return v1VocabularyFieldListDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyFieldListDefaultResponse>): v1VocabularyFieldListDefaultResponse {
    const message = createBasev1VocabularyFieldListDefaultResponse();
    message.field = object.field?.map((e) => FieldRecord.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEntityRow(): EntityRow {
  return { detailField: [] };
}

export const EntityRow: MessageFns<EntityRow> = {
  encode(message: EntityRow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.detailField) {
      EntityDetailField.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityRow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityRow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.detailField.push(EntityDetailField.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityRow {
    return {
      detailField: globalThis.Array.isArray(object?.detailField)
        ? object.detailField.map((e: any) => EntityDetailField.fromJSON(e))
        : [],
    };
  },

  toJSON(message: EntityRow): unknown {
    const obj: any = {};
    if (message.detailField?.length) {
      obj.detailField = message.detailField.map((e) => EntityDetailField.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<EntityRow>): EntityRow {
    return EntityRow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EntityRow>): EntityRow {
    const message = createBaseEntityRow();
    message.detailField = object.detailField?.map((e) => EntityDetailField.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEntityDetailField(): EntityDetailField {
  return { fieldId: "", pos: 0, col: 0 };
}

export const EntityDetailField: MessageFns<EntityDetailField> = {
  encode(message: EntityDetailField, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fieldId !== "") {
      writer.uint32(10).string(message.fieldId);
    }
    if (message.pos !== 0) {
      writer.uint32(16).int32(message.pos);
    }
    if (message.col !== 0) {
      writer.uint32(24).int32(message.col);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityDetailField {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityDetailField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fieldId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pos = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.col = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityDetailField {
    return {
      fieldId: isSet(object.fieldId) ? globalThis.String(object.fieldId) : "",
      pos: isSet(object.pos) ? globalThis.Number(object.pos) : 0,
      col: isSet(object.col) ? globalThis.Number(object.col) : 0,
    };
  },

  toJSON(message: EntityDetailField): unknown {
    const obj: any = {};
    if (message.fieldId !== "") {
      obj.fieldId = message.fieldId;
    }
    if (message.pos !== 0) {
      obj.pos = Math.round(message.pos);
    }
    if (message.col !== 0) {
      obj.col = Math.round(message.col);
    }
    return obj;
  },

  create(base?: DeepPartial<EntityDetailField>): EntityDetailField {
    return EntityDetailField.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EntityDetailField>): EntityDetailField {
    const message = createBaseEntityDetailField();
    message.fieldId = object.fieldId ?? "";
    message.pos = object.pos ?? 0;
    message.col = object.col ?? 0;
    return message;
  },
};

function createBaseEntityRecord(): EntityRecord {
  return { id: "", name: "", rows: [] };
}

export const EntityRecord: MessageFns<EntityRecord> = {
  encode(message: EntityRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    for (const v of message.rows) {
      EntityRow.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.rows.push(EntityRow.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityRecord {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      rows: globalThis.Array.isArray(object?.rows) ? object.rows.map((e: any) => EntityRow.fromJSON(e)) : [],
    };
  },

  toJSON(message: EntityRecord): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.rows?.length) {
      obj.rows = message.rows.map((e) => EntityRow.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<EntityRecord>): EntityRecord {
    return EntityRecord.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EntityRecord>): EntityRecord {
    const message = createBaseEntityRecord();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.rows = object.rows?.map((e) => EntityRow.fromPartial(e)) || [];
    return message;
  },
};

function createBasev1VocabularyEntityCreateDefaultRequest(): v1VocabularyEntityCreateDefaultRequest {
  return { name: "", rows: [] };
}

export const v1VocabularyEntityCreateDefaultRequest: MessageFns<v1VocabularyEntityCreateDefaultRequest> = {
  encode(message: v1VocabularyEntityCreateDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.rows) {
      EntityRow.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyEntityCreateDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyEntityCreateDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rows.push(EntityRow.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyEntityCreateDefaultRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      rows: globalThis.Array.isArray(object?.rows) ? object.rows.map((e: any) => EntityRow.fromJSON(e)) : [],
    };
  },

  toJSON(message: v1VocabularyEntityCreateDefaultRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.rows?.length) {
      obj.rows = message.rows.map((e) => EntityRow.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyEntityCreateDefaultRequest>): v1VocabularyEntityCreateDefaultRequest {
    return v1VocabularyEntityCreateDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyEntityCreateDefaultRequest>): v1VocabularyEntityCreateDefaultRequest {
    const message = createBasev1VocabularyEntityCreateDefaultRequest();
    message.name = object.name ?? "";
    message.rows = object.rows?.map((e) => EntityRow.fromPartial(e)) || [];
    return message;
  },
};

function createBasev1VocabularyEntityCreateDefaultResponse(): v1VocabularyEntityCreateDefaultResponse {
  return { id: "" };
}

export const v1VocabularyEntityCreateDefaultResponse: MessageFns<v1VocabularyEntityCreateDefaultResponse> = {
  encode(message: v1VocabularyEntityCreateDefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyEntityCreateDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyEntityCreateDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyEntityCreateDefaultResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: v1VocabularyEntityCreateDefaultResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyEntityCreateDefaultResponse>): v1VocabularyEntityCreateDefaultResponse {
    return v1VocabularyEntityCreateDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyEntityCreateDefaultResponse>): v1VocabularyEntityCreateDefaultResponse {
    const message = createBasev1VocabularyEntityCreateDefaultResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasev1VocabularyEntityUpdateDefaultRequest(): v1VocabularyEntityUpdateDefaultRequest {
  return { id: "", name: "", rows: [] };
}

export const v1VocabularyEntityUpdateDefaultRequest: MessageFns<v1VocabularyEntityUpdateDefaultRequest> = {
  encode(message: v1VocabularyEntityUpdateDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.rows) {
      EntityRow.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyEntityUpdateDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyEntityUpdateDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rows.push(EntityRow.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyEntityUpdateDefaultRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      rows: globalThis.Array.isArray(object?.rows) ? object.rows.map((e: any) => EntityRow.fromJSON(e)) : [],
    };
  },

  toJSON(message: v1VocabularyEntityUpdateDefaultRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.rows?.length) {
      obj.rows = message.rows.map((e) => EntityRow.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyEntityUpdateDefaultRequest>): v1VocabularyEntityUpdateDefaultRequest {
    return v1VocabularyEntityUpdateDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyEntityUpdateDefaultRequest>): v1VocabularyEntityUpdateDefaultRequest {
    const message = createBasev1VocabularyEntityUpdateDefaultRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.rows = object.rows?.map((e) => EntityRow.fromPartial(e)) || [];
    return message;
  },
};

function createBasev1VocabularyEntityUpdateDefaultResponse(): v1VocabularyEntityUpdateDefaultResponse {
  return { id: "" };
}

export const v1VocabularyEntityUpdateDefaultResponse: MessageFns<v1VocabularyEntityUpdateDefaultResponse> = {
  encode(message: v1VocabularyEntityUpdateDefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyEntityUpdateDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyEntityUpdateDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyEntityUpdateDefaultResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: v1VocabularyEntityUpdateDefaultResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyEntityUpdateDefaultResponse>): v1VocabularyEntityUpdateDefaultResponse {
    return v1VocabularyEntityUpdateDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyEntityUpdateDefaultResponse>): v1VocabularyEntityUpdateDefaultResponse {
    const message = createBasev1VocabularyEntityUpdateDefaultResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasev1VocabularyEntityReadDefaultRequest(): v1VocabularyEntityReadDefaultRequest {
  return { id: "" };
}

export const v1VocabularyEntityReadDefaultRequest: MessageFns<v1VocabularyEntityReadDefaultRequest> = {
  encode(message: v1VocabularyEntityReadDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyEntityReadDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyEntityReadDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyEntityReadDefaultRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: v1VocabularyEntityReadDefaultRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyEntityReadDefaultRequest>): v1VocabularyEntityReadDefaultRequest {
    return v1VocabularyEntityReadDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyEntityReadDefaultRequest>): v1VocabularyEntityReadDefaultRequest {
    const message = createBasev1VocabularyEntityReadDefaultRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasev1VocabularyEntityReadDefaultResponse(): v1VocabularyEntityReadDefaultResponse {
  return { entity: undefined };
}

export const v1VocabularyEntityReadDefaultResponse: MessageFns<v1VocabularyEntityReadDefaultResponse> = {
  encode(message: v1VocabularyEntityReadDefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entity !== undefined) {
      EntityRecord.encode(message.entity, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyEntityReadDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyEntityReadDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entity = EntityRecord.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyEntityReadDefaultResponse {
    return { entity: isSet(object.entity) ? EntityRecord.fromJSON(object.entity) : undefined };
  },

  toJSON(message: v1VocabularyEntityReadDefaultResponse): unknown {
    const obj: any = {};
    if (message.entity !== undefined) {
      obj.entity = EntityRecord.toJSON(message.entity);
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyEntityReadDefaultResponse>): v1VocabularyEntityReadDefaultResponse {
    return v1VocabularyEntityReadDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyEntityReadDefaultResponse>): v1VocabularyEntityReadDefaultResponse {
    const message = createBasev1VocabularyEntityReadDefaultResponse();
    message.entity = (object.entity !== undefined && object.entity !== null)
      ? EntityRecord.fromPartial(object.entity)
      : undefined;
    return message;
  },
};

function createBasev1VocabularyEntityListDefaultRequest(): v1VocabularyEntityListDefaultRequest {
  return {};
}

export const v1VocabularyEntityListDefaultRequest: MessageFns<v1VocabularyEntityListDefaultRequest> = {
  encode(_: v1VocabularyEntityListDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyEntityListDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyEntityListDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): v1VocabularyEntityListDefaultRequest {
    return {};
  },

  toJSON(_: v1VocabularyEntityListDefaultRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyEntityListDefaultRequest>): v1VocabularyEntityListDefaultRequest {
    return v1VocabularyEntityListDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<v1VocabularyEntityListDefaultRequest>): v1VocabularyEntityListDefaultRequest {
    const message = createBasev1VocabularyEntityListDefaultRequest();
    return message;
  },
};

function createBasev1VocabularyEntityListDefaultResponse(): v1VocabularyEntityListDefaultResponse {
  return { entity: [] };
}

export const v1VocabularyEntityListDefaultResponse: MessageFns<v1VocabularyEntityListDefaultResponse> = {
  encode(message: v1VocabularyEntityListDefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entity) {
      EntityRecord.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): v1VocabularyEntityListDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasev1VocabularyEntityListDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entity.push(EntityRecord.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): v1VocabularyEntityListDefaultResponse {
    return {
      entity: globalThis.Array.isArray(object?.entity) ? object.entity.map((e: any) => EntityRecord.fromJSON(e)) : [],
    };
  },

  toJSON(message: v1VocabularyEntityListDefaultResponse): unknown {
    const obj: any = {};
    if (message.entity?.length) {
      obj.entity = message.entity.map((e) => EntityRecord.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<v1VocabularyEntityListDefaultResponse>): v1VocabularyEntityListDefaultResponse {
    return v1VocabularyEntityListDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<v1VocabularyEntityListDefaultResponse>): v1VocabularyEntityListDefaultResponse {
    const message = createBasev1VocabularyEntityListDefaultResponse();
    message.entity = object.entity?.map((e) => EntityRecord.fromPartial(e)) || [];
    return message;
  },
};

export type VocabularyService = typeof VocabularyService;
export const VocabularyService = {
  v1VocabularyDirectoryCreateDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyDirectoryCreateDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyDirectoryCreateDefaultRequest) =>
      Buffer.from(v1VocabularyDirectoryCreateDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyDirectoryCreateDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyDirectoryCreateDefaultResponse) =>
      Buffer.from(v1VocabularyDirectoryCreateDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyDirectoryCreateDefaultResponse.decode(value),
  },
  v1VocabularyDirectoryUpdateDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyDirectoryUpdateDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyDirectoryUpdateDefaultRequest) =>
      Buffer.from(v1VocabularyDirectoryUpdateDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyDirectoryUpdateDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyDirectoryUpdateDefaultResponse) =>
      Buffer.from(v1VocabularyDirectoryUpdateDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyDirectoryUpdateDefaultResponse.decode(value),
  },
  v1VocabularyDirectoryDeleteDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyDirectoryDeleteDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyDirectoryDeleteDefaultRequest) =>
      Buffer.from(v1VocabularyDirectoryDeleteDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyDirectoryDeleteDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyDirectoryDeleteDefaultResponse) =>
      Buffer.from(v1VocabularyDirectoryDeleteDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyDirectoryDeleteDefaultResponse.decode(value),
  },
  v1VocabularyDirectoryListDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyDirectoryListDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyDirectoryListDefaultRequest) =>
      Buffer.from(v1VocabularyDirectoryListDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyDirectoryListDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyDirectoryListDefaultResponse) =>
      Buffer.from(v1VocabularyDirectoryListDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyDirectoryListDefaultResponse.decode(value),
  },
  v1VocabularyDirectoryReadDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyDirectoryReadDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyDirectoryReadDefaultRequest) =>
      Buffer.from(v1VocabularyDirectoryReadDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyDirectoryReadDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyDirectoryReadDefaultResponse) =>
      Buffer.from(v1VocabularyDirectoryReadDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyDirectoryReadDefaultResponse.decode(value),
  },
  v1VocabularyDirectoryValueCreateDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyDirectoryValueCreateDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyDirectoryValueCreateDefaultRequest) =>
      Buffer.from(v1VocabularyDirectoryValueCreateDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyDirectoryValueCreateDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyDirectoryValueCreateDefaultResponse) =>
      Buffer.from(v1VocabularyDirectoryValueCreateDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyDirectoryValueCreateDefaultResponse.decode(value),
  },
  v1VocabularyDirectoryValueUpdateDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyDirectoryValueUpdateDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyDirectoryValueUpdateDefaultRequest) =>
      Buffer.from(v1VocabularyDirectoryValueUpdateDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyDirectoryValueUpdateDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyDirectoryValueUpdateDefaultResponse) =>
      Buffer.from(v1VocabularyDirectoryValueUpdateDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyDirectoryValueUpdateDefaultResponse.decode(value),
  },
  v1VocabularyDirectoryValueDeleteDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyDirectoryValueDeleteDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyDirectoryValueDeleteDefaultRequest) =>
      Buffer.from(v1VocabularyDirectoryValueDeleteDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyDirectoryValueDeleteDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyDirectoryValueDeleteDefaultResponse) =>
      Buffer.from(v1VocabularyDirectoryValueDeleteDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyDirectoryValueDeleteDefaultResponse.decode(value),
  },
  v1VocabularyDirectoryValueListDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyDirectoryValueListDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyDirectoryValueListDefaultRequest) =>
      Buffer.from(v1VocabularyDirectoryValueListDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyDirectoryValueListDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyDirectoryValueListDefaultResponse) =>
      Buffer.from(v1VocabularyDirectoryValueListDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyDirectoryValueListDefaultResponse.decode(value),
  },
  v1VocabularyDirectoryValueReadDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyDirectoryValueReadDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyDirectoryValueReadDefaultRequest) =>
      Buffer.from(v1VocabularyDirectoryValueReadDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyDirectoryValueReadDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyDirectoryValueReadDefaultResponse) =>
      Buffer.from(v1VocabularyDirectoryValueReadDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyDirectoryValueReadDefaultResponse.decode(value),
  },
  v1VocabularyFieldCreateDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyFieldCreateDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyFieldCreateDefaultRequest) =>
      Buffer.from(v1VocabularyFieldCreateDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyFieldCreateDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyFieldCreateDefaultResponse) =>
      Buffer.from(v1VocabularyFieldCreateDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyFieldCreateDefaultResponse.decode(value),
  },
  v1VocabularyFieldUpdateDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyFieldUpdateDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyFieldUpdateDefaultRequest) =>
      Buffer.from(v1VocabularyFieldUpdateDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyFieldUpdateDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyFieldUpdateDefaultResponse) =>
      Buffer.from(v1VocabularyFieldUpdateDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyFieldUpdateDefaultResponse.decode(value),
  },
  v1VocabularyFieldListDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyFieldListDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyFieldListDefaultRequest) =>
      Buffer.from(v1VocabularyFieldListDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyFieldListDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyFieldListDefaultResponse) =>
      Buffer.from(v1VocabularyFieldListDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyFieldListDefaultResponse.decode(value),
  },
  v1VocabularyFieldReadDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyFieldReadDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyFieldReadDefaultRequest) =>
      Buffer.from(v1VocabularyFieldReadDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyFieldReadDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyFieldReadDefaultResponse) =>
      Buffer.from(v1VocabularyFieldReadDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyFieldReadDefaultResponse.decode(value),
  },
  v1VocabularyEntityCreateDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyEntityCreateDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyEntityCreateDefaultRequest) =>
      Buffer.from(v1VocabularyEntityCreateDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyEntityCreateDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyEntityCreateDefaultResponse) =>
      Buffer.from(v1VocabularyEntityCreateDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyEntityCreateDefaultResponse.decode(value),
  },
  v1VocabularyEntityUpdateDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyEntityUpdateDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyEntityUpdateDefaultRequest) =>
      Buffer.from(v1VocabularyEntityUpdateDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyEntityUpdateDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyEntityUpdateDefaultResponse) =>
      Buffer.from(v1VocabularyEntityUpdateDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyEntityUpdateDefaultResponse.decode(value),
  },
  v1VocabularyEntityListDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyEntityListDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyEntityListDefaultRequest) =>
      Buffer.from(v1VocabularyEntityListDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyEntityListDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyEntityListDefaultResponse) =>
      Buffer.from(v1VocabularyEntityListDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyEntityListDefaultResponse.decode(value),
  },
  v1VocabularyEntityReadDefault: {
    path: "/vocabulary.Vocabulary/v1VocabularyEntityReadDefault",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: v1VocabularyEntityReadDefaultRequest) =>
      Buffer.from(v1VocabularyEntityReadDefaultRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => v1VocabularyEntityReadDefaultRequest.decode(value),
    responseSerialize: (value: v1VocabularyEntityReadDefaultResponse) =>
      Buffer.from(v1VocabularyEntityReadDefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => v1VocabularyEntityReadDefaultResponse.decode(value),
  },
} as const;

export interface VocabularyServer extends UntypedServiceImplementation {
  v1VocabularyDirectoryCreateDefault: handleUnaryCall<
    v1VocabularyDirectoryCreateDefaultRequest,
    v1VocabularyDirectoryCreateDefaultResponse
  >;
  v1VocabularyDirectoryUpdateDefault: handleUnaryCall<
    v1VocabularyDirectoryUpdateDefaultRequest,
    v1VocabularyDirectoryUpdateDefaultResponse
  >;
  v1VocabularyDirectoryDeleteDefault: handleUnaryCall<
    v1VocabularyDirectoryDeleteDefaultRequest,
    v1VocabularyDirectoryDeleteDefaultResponse
  >;
  v1VocabularyDirectoryListDefault: handleUnaryCall<
    v1VocabularyDirectoryListDefaultRequest,
    v1VocabularyDirectoryListDefaultResponse
  >;
  v1VocabularyDirectoryReadDefault: handleUnaryCall<
    v1VocabularyDirectoryReadDefaultRequest,
    v1VocabularyDirectoryReadDefaultResponse
  >;
  v1VocabularyDirectoryValueCreateDefault: handleUnaryCall<
    v1VocabularyDirectoryValueCreateDefaultRequest,
    v1VocabularyDirectoryValueCreateDefaultResponse
  >;
  v1VocabularyDirectoryValueUpdateDefault: handleUnaryCall<
    v1VocabularyDirectoryValueUpdateDefaultRequest,
    v1VocabularyDirectoryValueUpdateDefaultResponse
  >;
  v1VocabularyDirectoryValueDeleteDefault: handleUnaryCall<
    v1VocabularyDirectoryValueDeleteDefaultRequest,
    v1VocabularyDirectoryValueDeleteDefaultResponse
  >;
  v1VocabularyDirectoryValueListDefault: handleUnaryCall<
    v1VocabularyDirectoryValueListDefaultRequest,
    v1VocabularyDirectoryValueListDefaultResponse
  >;
  v1VocabularyDirectoryValueReadDefault: handleUnaryCall<
    v1VocabularyDirectoryValueReadDefaultRequest,
    v1VocabularyDirectoryValueReadDefaultResponse
  >;
  v1VocabularyFieldCreateDefault: handleUnaryCall<
    v1VocabularyFieldCreateDefaultRequest,
    v1VocabularyFieldCreateDefaultResponse
  >;
  v1VocabularyFieldUpdateDefault: handleUnaryCall<
    v1VocabularyFieldUpdateDefaultRequest,
    v1VocabularyFieldUpdateDefaultResponse
  >;
  v1VocabularyFieldListDefault: handleUnaryCall<
    v1VocabularyFieldListDefaultRequest,
    v1VocabularyFieldListDefaultResponse
  >;
  v1VocabularyFieldReadDefault: handleUnaryCall<
    v1VocabularyFieldReadDefaultRequest,
    v1VocabularyFieldReadDefaultResponse
  >;
  v1VocabularyEntityCreateDefault: handleUnaryCall<
    v1VocabularyEntityCreateDefaultRequest,
    v1VocabularyEntityCreateDefaultResponse
  >;
  v1VocabularyEntityUpdateDefault: handleUnaryCall<
    v1VocabularyEntityUpdateDefaultRequest,
    v1VocabularyEntityUpdateDefaultResponse
  >;
  v1VocabularyEntityListDefault: handleUnaryCall<
    v1VocabularyEntityListDefaultRequest,
    v1VocabularyEntityListDefaultResponse
  >;
  v1VocabularyEntityReadDefault: handleUnaryCall<
    v1VocabularyEntityReadDefaultRequest,
    v1VocabularyEntityReadDefaultResponse
  >;
}

export interface VocabularyClient extends Client {
  v1VocabularyDirectoryCreateDefault(
    request: v1VocabularyDirectoryCreateDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryCreateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryCreateDefault(
    request: v1VocabularyDirectoryCreateDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryCreateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryCreateDefault(
    request: v1VocabularyDirectoryCreateDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryCreateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryUpdateDefault(
    request: v1VocabularyDirectoryUpdateDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryUpdateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryUpdateDefault(
    request: v1VocabularyDirectoryUpdateDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryUpdateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryUpdateDefault(
    request: v1VocabularyDirectoryUpdateDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryUpdateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryDeleteDefault(
    request: v1VocabularyDirectoryDeleteDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryDeleteDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryDeleteDefault(
    request: v1VocabularyDirectoryDeleteDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryDeleteDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryDeleteDefault(
    request: v1VocabularyDirectoryDeleteDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryDeleteDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryListDefault(
    request: v1VocabularyDirectoryListDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryListDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryListDefault(
    request: v1VocabularyDirectoryListDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryListDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryListDefault(
    request: v1VocabularyDirectoryListDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryListDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryReadDefault(
    request: v1VocabularyDirectoryReadDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryReadDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryReadDefault(
    request: v1VocabularyDirectoryReadDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryReadDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryReadDefault(
    request: v1VocabularyDirectoryReadDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryReadDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryValueCreateDefault(
    request: v1VocabularyDirectoryValueCreateDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryValueCreateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryValueCreateDefault(
    request: v1VocabularyDirectoryValueCreateDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryValueCreateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryValueCreateDefault(
    request: v1VocabularyDirectoryValueCreateDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryValueCreateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryValueUpdateDefault(
    request: v1VocabularyDirectoryValueUpdateDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryValueUpdateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryValueUpdateDefault(
    request: v1VocabularyDirectoryValueUpdateDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryValueUpdateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryValueUpdateDefault(
    request: v1VocabularyDirectoryValueUpdateDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryValueUpdateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryValueDeleteDefault(
    request: v1VocabularyDirectoryValueDeleteDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryValueDeleteDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryValueDeleteDefault(
    request: v1VocabularyDirectoryValueDeleteDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryValueDeleteDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryValueDeleteDefault(
    request: v1VocabularyDirectoryValueDeleteDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryValueDeleteDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryValueListDefault(
    request: v1VocabularyDirectoryValueListDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryValueListDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryValueListDefault(
    request: v1VocabularyDirectoryValueListDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryValueListDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryValueListDefault(
    request: v1VocabularyDirectoryValueListDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryValueListDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryValueReadDefault(
    request: v1VocabularyDirectoryValueReadDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryValueReadDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryValueReadDefault(
    request: v1VocabularyDirectoryValueReadDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryValueReadDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyDirectoryValueReadDefault(
    request: v1VocabularyDirectoryValueReadDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyDirectoryValueReadDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyFieldCreateDefault(
    request: v1VocabularyFieldCreateDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyFieldCreateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyFieldCreateDefault(
    request: v1VocabularyFieldCreateDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyFieldCreateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyFieldCreateDefault(
    request: v1VocabularyFieldCreateDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyFieldCreateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyFieldUpdateDefault(
    request: v1VocabularyFieldUpdateDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyFieldUpdateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyFieldUpdateDefault(
    request: v1VocabularyFieldUpdateDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyFieldUpdateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyFieldUpdateDefault(
    request: v1VocabularyFieldUpdateDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyFieldUpdateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyFieldListDefault(
    request: v1VocabularyFieldListDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyFieldListDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyFieldListDefault(
    request: v1VocabularyFieldListDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyFieldListDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyFieldListDefault(
    request: v1VocabularyFieldListDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyFieldListDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyFieldReadDefault(
    request: v1VocabularyFieldReadDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyFieldReadDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyFieldReadDefault(
    request: v1VocabularyFieldReadDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyFieldReadDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyFieldReadDefault(
    request: v1VocabularyFieldReadDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyFieldReadDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyEntityCreateDefault(
    request: v1VocabularyEntityCreateDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyEntityCreateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyEntityCreateDefault(
    request: v1VocabularyEntityCreateDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyEntityCreateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyEntityCreateDefault(
    request: v1VocabularyEntityCreateDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyEntityCreateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyEntityUpdateDefault(
    request: v1VocabularyEntityUpdateDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyEntityUpdateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyEntityUpdateDefault(
    request: v1VocabularyEntityUpdateDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyEntityUpdateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyEntityUpdateDefault(
    request: v1VocabularyEntityUpdateDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyEntityUpdateDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyEntityListDefault(
    request: v1VocabularyEntityListDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyEntityListDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyEntityListDefault(
    request: v1VocabularyEntityListDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyEntityListDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyEntityListDefault(
    request: v1VocabularyEntityListDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyEntityListDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyEntityReadDefault(
    request: v1VocabularyEntityReadDefaultRequest,
    callback: (error: ServiceError | null, response: v1VocabularyEntityReadDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyEntityReadDefault(
    request: v1VocabularyEntityReadDefaultRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: v1VocabularyEntityReadDefaultResponse) => void,
  ): ClientUnaryCall;
  v1VocabularyEntityReadDefault(
    request: v1VocabularyEntityReadDefaultRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: v1VocabularyEntityReadDefaultResponse) => void,
  ): ClientUnaryCall;
}

export const VocabularyClient = makeGenericClientConstructor(VocabularyService, "vocabulary.Vocabulary") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): VocabularyClient;
  service: typeof VocabularyService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
